<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java位运算</title>
      <link href="/2024/04/23/Java%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2024/04/23/Java%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​    凡是位运算符，都是把值先转换成二进制，再进行后续的处理（因为位运算是针对二进制数进行的一种运算，对于十进制这些数值的位运算来说，会先将其转为二进制，再对其进行位运算，之后将运算结果再转为十进制。）</p><p><img src="https://aceverything-blog.oss-cn-beijing.aliyuncs.com/blogImg/image-20240423232559587.png" alt="image-20240423232559587"></p><blockquote><p>右移&gt;&gt;（相当于除2）左边补符号位</p><p>左移&lt;&lt;（相当于乘2）右边补0</p><p>无符号右移&gt;&gt;&gt;（相当于除2）左边补0</p></blockquote><h4 id="异或运算符"><a href="#异或运算符" class="headerlink" title="^异或运算符"></a>^异或运算符</h4><blockquote><p> ^异或运算符顾名思义，异就是不同</p><p> 运算规则：两个二进制位上的数字如果相同，则运算结果为0；</p><p> 如果两个二进制位上的数字不相同，则运算结果为1。</p></blockquote><p>面试题：不使用第三个变量交换两个数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span><span class="number">10</span>;<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="comment">//加减法;缺点，如果数据大可能会出现溢出</span></span><br><span class="line">        x=x+y;</span><br><span class="line">        y=x-y;</span><br><span class="line">        x=x-y;</span><br><span class="line">        <span class="comment">//异或法</span></span><br><span class="line">        x=x^y;</span><br><span class="line">        y=x^y;</span><br><span class="line">        x=x^y;</span><br><span class="line">        System.out.println(<span class="string">&quot;交换后&quot;</span>+x+<span class="string">&quot; &quot;</span>+y);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>规律：</p><ol><li>交换律：a ^ b ^ c &lt;&#x3D;&gt; a ^ c ^ b</li><li>任何数于0异或为任何数 0 ^ n &#x3D;&gt; n</li><li>相同的数异或为0: n ^ n &#x3D;&gt; 0</li></ol><h4 id=""><a href="#" class="headerlink" title="&lt;&lt;左移运算符"></a><strong>&lt;&lt;左移运算符</strong></h4><blockquote><p> 5&lt;&lt;2的意思为5的二进制位往左挪两位，右边补0</p><p> 5的二进制位是0000 0101 ， 就是把有效值101往左挪两位就是0001 0100 ，正数左边第一位补0，负数补1，等于乘于2的n次方，十进制位是5*2^2&#x3D;20</p><p>乘以2的N次方：</p><p> 左移运算有乘以2的N次方的效果。一个数向左移动1位，就相当于乘以2的1次方，移动两位就相当于乘以2的2次方，也就是乘以4。</p><p> 位移操作在实际运算时远远快于乘法操作，所以在某些对运算速度要求非常高的场合，可以考虑用左移代替乘以2的N次方的乘法操作。</p></blockquote><p> 注意三个细节：</p><ol><li>首先：位移操作同取反操作一样，并不能改变变量本身的值，所能改变的仅是存储在操作数栈中那个数据的值</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;            </span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;            </span><br><span class="line">        System.out.println(a&lt;&lt;<span class="number">2</span>); <span class="comment">//20  左移2位结果为20           </span></span><br><span class="line">        System.out.println(a);  <span class="comment">//5 但a的值没有改变        </span></span><br><span class="line">      &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>其次：当位移的位数很多时，导致最左边的符号位发生变化，就不再具有乘以2的N次方的效果了。比如十进制的5转换为补码形式是：前面29个0最后3位是101，如果移动29位，那么最前面的符号位就变成了1，此时运算的结果就成为了一个负数，不再是5乘以2的29次方的乘法结果。</p></li><li><p>如果位移数超过31，则虚拟机会对位移数按连续减去32，直到得到一个小于32并且大于等于0的数，然后以这个数作为最终的位移数。例如：对int型变量进行位移97位的操作，虚拟机会首先对97连续减去3个32，最终得到数字1，实际进行位移运算时只对变量位移1位。而对于long类型的数据而言，最多支持63位的位移运算，如果位移数超过63，则连续减去64，以最终得到的小于64并且大于等于0的数作为位移数。 数字5左移32位的倍数还是数字本身。</p></li></ol><h4 id="右移运算符"><a href="#右移运算符" class="headerlink" title="&gt;&gt;右移运算符"></a><strong>&gt;&gt;右移运算符</strong></h4><blockquote><p>右移运算分为两种，分别是带符号右移和无符号右移。首先我们来说说带符号右移运算符。带符号右移运算符的写法是”&gt;&gt;“，与左移运算符的方向恰好相反。所谓带符号右移就是指当二进制串向右边移动以后，左边空出的位用”符号位上的数字”填充，说的更直白一点，如果是正数，二进制串右移的时候用0来填充左边的空位，而对于负数而言，右移的时候用1来填充左边的空位。</p></blockquote><p>类似”除以2的N次方的效果</p><p> 注意：这里说的是“类似”除以2的N次方的效果，为什么要加上“类似”两个字呢？</p><p> 就是因为对于正数而言，带符号右移之后产生的数字确实等于除以2的N次方，比如说我们把N的值设为3，对于正15，带符号右移3位的结果是1，这个结果与“15除以2的3次方”的结果是相同的。</p><p> <strong>但是对于负数而言，带符号右移的效果分为两种情况</strong>，我们分别来讨论。</p><p> <strong>如果这个负数是“2的N次方”的整数倍，</strong>那么带符号右移N位的效果也等于除以2的N次方。举个例子：我们还是把N的值设为3，如果对于“-16”来说，它是“2的3次方”的整数倍，那么带符号右移3位的结果是-2，这个结果相当于“-16除以2的3次方”。</p><p> <strong>而如果这个负数不是“2的N次方”的整数倍</strong>，那么右移N位之后，是在除以2的N次方的结果之上还要减去1。比如，对于-15来说，它不是“2的3次方”的整数倍，那么带符号右移3位的结果是-2，这个运算结果其实就是“-15被2的3次方整除再减去1”。小伙伴们也可以用其他负整数来验证一下这个结论。因为并非每个负整数带符号右移的结果都等于除以“2的N次方”，所以我们才在文中添加了“类似”这两个字。</p><p> 带符号右移的操作可以保证移动之前和移动之后数字的正负属性不变，原来是正数，不管移动多少位，移动之后还是正数，原来是负数，移动之后还是负数。</p><blockquote><p>小结论：</p><p>另外，我们还可以继续深挖一下这个特性，从而得到一个结论：对于任何一个byte、short或者int类型的数据而言，带符号右移31位之后，得到的必然是0或者是-1。对于long类型的数据而言，带符号右移63位之后，得到的也必然是0或者是-1。</p><p>能够得出这个结论的依据也很简单，就是因为对于byte、short和int类型的变量而言，如果是正数，带符号右移31位之后产生的二进制串必然全部是0，转换成对应的十进制数就是0；而对于负数而言，带符号右移31位之后产生的二进制串必然全部是1，转换成十进制数就是-1。对于long类型的数据，带符号右移63位也具有相同效果。</p></blockquote><h4 id="无符号右移运算符"><a href="#无符号右移运算符" class="headerlink" title="&gt;&gt;&gt;无符号右移运算符"></a><strong>&gt;&gt;&gt;无符号右移运算符</strong></h4><blockquote><p>无符号右移的运算规则与有符号右移的运算规则差别就在于：无符号右移在二进制串移动之后，空位由0来补充，与符号位是0还是1毫无关系。</p><p> 对于正数而言，无符号右移和带符号右移没有什么区别，而对于负数而言，经过无符号右移会产生一个正数，因为最左边的符号位被0填充了。</p></blockquote><ol><li>正数无符号右移</li></ol><blockquote><p>无符号右移运算符和右移运算符的主要区别在于负数的计算，因为无符号右移是高位补0，移多少位补多少个0。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//15的二进制位是0000 1111 ， 右移2位0000 0011，结果为3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *     0000 1111</span></span><br><span class="line"><span class="comment">        *   ---------------</span></span><br><span class="line"><span class="comment">        *     0000 0011</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="number">15</span>&gt;&gt;&gt;<span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>负数无符号右移</li></ol><blockquote><p>-6的二进制是6的二进制取反再加1,</p><p>6的二进制也就是0000 0000 0000 0000 0000 0000 0000 0110，</p><p>取反后加1为1111 1111 1111 1111 1111 1111 1111 1010，</p><p>右移三位0001 1111 1111 1111 1111 1111 1111 1111</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(-<span class="number">6</span>&gt;&gt;&gt;<span class="number">3</span>); <span class="comment">// 536870911</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a><strong>常见用法</strong></h4><ol><li><strong>位运算实现乘除法:</strong></li></ol><p> 通常如果需要乘以或除以2的n次方，都可以用移位的方法代替</p><ol start="2"><li><strong>位运算判断奇偶数</strong></li></ol><p>通过二进制判断奇偶：<strong>该数二进制的最后一位是0的话那么就为偶数；是1的话就为奇数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span> == (<span class="number">1</span> &amp; i)) ? 奇数 : 偶数</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>位运算改变正负性</strong></li></ol><p> 正数变成负数，负数变成正数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将-11变成11</span></span><br><span class="line"><span class="comment">   * 1111 0101(二进制) –取反-&gt; 0000 1010(二进制) –加1-&gt; 0000 1011(二进制)</span></span><br><span class="line"><span class="comment">   * 将11变成-11</span></span><br><span class="line"><span class="comment">   * 0000 1011(二进制) –取反-&gt; 0000 0100(二进制) –加1-&gt; 1111 0101(二进制)</span></span><br><span class="line"><span class="comment">   * 因此变换符号只需要取反后加1即可</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">SignReversal</span><span class="params">(<span class="type">int</span> a)</span>  &#123;  </span><br><span class="line">    <span class="keyword">return</span> ~a + <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ol start="4"><li><strong>求绝对值</strong></li></ol><p>对应的负数改变为正数，就是取反+1，正数不变</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_abs</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;    </span><br><span class="line">  <span class="type">int</span> i = a &gt;&gt; <span class="number">31</span>;    </span><br><span class="line">  <span class="keyword">return</span> i == <span class="number">0</span> ? a : (~a + <span class="number">1</span>); </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 对于任何数，与0异或都会保持不变，与-1即0xFFFFFFFF异或就相当于取反。因此，a与i异或后再减i（因为i为0或-1，所以减i即是要么加0要么加1）也可以得到绝对值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">my_abs</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = a &gt;&gt; <span class="number">31</span>;</span><br><span class="line">    <span class="keyword">return</span> ((a ^ i) - i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>十进制与二进制转换练习</strong></li></ol><ul><li>十进制数10转为二进制</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10除以2 得5 余数为 0</span><br><span class="line">再拿刚才的5除以2得2 余数为1</span><br><span class="line">2除以2得1 余数为0</span><br><span class="line">1除以2 直接余数为1</span><br><span class="line">那么就为1010</span><br></pre></td></tr></table></figure><ul><li>二进制数1110转为十进制</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1011</span><br><span class="line">这是个二进制数，所以每个数都有2的影子。所以我们从右边数，</span><br><span class="line">1转为 1*2^0等于1</span><br><span class="line">1转为 1*2^1等于2</span><br><span class="line">0转为 0*2^2等于0</span><br><span class="line">1转为1*2^3等于8</span><br><span class="line">1+2+0+8=11</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/2024/04/15/Test/"/>
      <url>/2024/04/15/Test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/13/hello-world/"/>
      <url>/2024/04/13/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
